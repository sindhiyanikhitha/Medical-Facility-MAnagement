/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.StateHealthDeptManager;

import Business.EcoSystem;
import Business.Enterprise.Distributor;
import Business.Enterprise.SupplierEnterprise;
import Business.Inventory.InventoryItem;
import Business.Network.CountryNetwork;
import Business.Network.StateNetwork;
import Business.Order.OrderRequest;
import Business.Organization.InventoryManagementOrg;
import Business.Organization.Organization;
import Business.Organization.SupplierOrg;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author HarshithaApurvaNikhitha
 */
public class ManageSupplierOrderJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageSupplierOrderJPanel
     */
    JPanel userProcessContainer;
    UserAccount userAccount;
    SupplierOrg organization;
    SupplierEnterprise supplierEnterprise;
    StateNetwork stateNetwork;
    CountryNetwork countryNetwork;
    EcoSystem ecoSystem;
    public ManageSupplierOrderJPanel(JPanel userProcessContainer, UserAccount userAccount, SupplierOrg organization, SupplierEnterprise supplierEnterprise, StateNetwork stateNetwork, CountryNetwork countryNetwork, EcoSystem ecosystem) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = userAccount;
        this.organization = organization;
        this.supplierEnterprise = supplierEnterprise;
        this.stateNetwork = stateNetwork;
        this.countryNetwork = countryNetwork;
        this.ecoSystem = ecosystem;
    }

    public void populateJTable(){
        DefaultTableModel defaultTableModel = (DefaultTableModel)workRequestTable.getModel();
        defaultTableModel.setRowCount(0);
        if(supplierEnterprise.getOrderQueue() != null){
            for(OrderRequest orderRequest : supplierEnterprise.getOrderQueue().getOrderRequests()){
                Object[] objects = new Object[5];
                objects[0] = orderRequest.getVaccine().getVaccineName();
                objects[1] = orderRequest.getQuantity();
                objects[2] = orderRequest;
                objects[3] = orderRequest.getOrderReceiver() == null ? null : orderRequest.getOrderReceiver().getEmployee().getEmployeeName();
                objects[4] = orderRequest.getOrderStatus();
                defaultTableModel.addRow(objects);
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        orderLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestTable = new javax.swing.JTable();
        assignBtn = new javax.swing.JButton();
        approveOrderBtn = new javax.swing.JButton();
        refreshBtn = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 204, 153));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        orderLabel.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        orderLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        orderLabel.setText("Manage Order Approvals");
        add(orderLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(29, 11, 861, 41));

        workRequestTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order Item", "Quantity", "Sender", "Receiver", "Status", "Supplier"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 871, 96));

        assignBtn.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        assignBtn.setText("Assign to me");
        assignBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignBtnActionPerformed(evt);
            }
        });
        add(assignBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 220, -1, -1));

        approveOrderBtn.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        approveOrderBtn.setText("Approve");
        approveOrderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                approveOrderBtnActionPerformed(evt);
            }
        });
        add(approveOrderBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(649, 221, -1, -1));

        refreshBtn.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        refreshBtn.setText("Refresh");
        refreshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshBtnActionPerformed(evt);
            }
        });
        add(refreshBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(779, 221, -1, -1));

        backJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/AdministrativeRole/click-go-back-button.png"))); // NOI18N
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(39, 541, 100, 40));

        backBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/AdminRole/click-go-back-button.png"))); // NOI18N
        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });
        add(backBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 310, 110, 60));
    }// </editor-fold>//GEN-END:initComponents

    private void assignBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignBtnActionPerformed
        int selectedRow = workRequestTable.getSelectedRow();
        if (selectedRow < 0){
            return;
        }
        OrderRequest orderRequest = (OrderRequest)workRequestTable.getValueAt(selectedRow, 2);
        String orderStatus = orderRequest.getOrderStatus();
        if(orderStatus != "Processed"){
            orderRequest.setOrderReceiver(userAccount);
            orderRequest.setOrderStatus("In Process");
            JOptionPane.showMessageDialog(null, "You have been assigned");
            populateJTable();
        }
    }//GEN-LAST:event_assignBtnActionPerformed

    private void approveOrderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_approveOrderBtnActionPerformed
        int selectedRow = workRequestTable.getSelectedRow();
        if (selectedRow < 0){
            return;
        }
        OrderRequest orderRequest = (OrderRequest)workRequestTable.getValueAt(selectedRow, 2);
        if(orderRequest.getOrderStatus().equals("Processed")){
            JOptionPane.showMessageDialog(null, "Order already Processed!");
            return;
        }
        
        InventoryItem inventory = this.organization.getVaccineStock().getInventoryByVaccine(orderRequest.getVaccine());
        if(inventory != null && inventory.checkQuantity(orderRequest.getQuantity())){
            inventory.setQuantity( (inventory.getQuantity() - orderRequest.getQuantity()) );
            System.out.println(ecoSystem);
            List<Distributor> distributorList = ecoSystem.getDistributorEnterpriseFromAllCountries();
            for(Distributor dis: distributorList){
                for(Organization inventoryManagementOrganization: dis.getOrganizationList().getOrganizationList()){
                    if(inventoryManagementOrganization instanceof InventoryManagementOrg){
                        if(inventoryManagementOrganization.getUserAccountList().checkIfUserAccountExist(orderRequest.getOrderSender()) != null){
                            System.out.println(((InventoryManagementOrg) inventoryManagementOrganization).getInventoryDirectory());
                            System.out.println("Testing");
                            InventoryItem inventoryItem = ((InventoryManagementOrg) inventoryManagementOrganization).getInventoryDirectory().getInventoryByVaccine(orderRequest.getVaccine());
                            if(inventoryItem != null){
                                inventoryItem.setQuantity(inventoryItem.getQuantity() + orderRequest.getQuantity());
                            }
                            else{
                                ((InventoryManagementOrg) inventoryManagementOrganization).getInventoryDirectory().addNewItem(orderRequest.getVaccine(), orderRequest.getQuantity());
                            }
                        }
                        else{
                            JOptionPane.showMessageDialog(null, "Enterprise not found!");
                            return;
                        }
                    }
                }
            }
            orderRequest.setOrderStatus("Processed");
        }
        else{
            JOptionPane.showMessageDialog(null, "Stock not available!");
            return;
        }
        JOptionPane.showMessageDialog(null, "Supplier Organization has been created successfully!");
        populateJTable();
    }//GEN-LAST:event_approveOrderBtnActionPerformed

    private void refreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBtnActionPerformed
        populateJTable();
    }//GEN-LAST:event_refreshBtnActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton approveOrderBtn;
    private javax.swing.JButton assignBtn;
    private javax.swing.JButton backBtn;
    private javax.swing.JButton backJButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel orderLabel;
    private javax.swing.JButton refreshBtn;
    private javax.swing.JTable workRequestTable;
    // End of variables declaration//GEN-END:variables
}
