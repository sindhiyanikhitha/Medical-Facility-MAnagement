/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.SysAdminWorkArea;

import Business.EcoSystem;
import Business.Network.CountryNetwork;
import Business.Network.StateNetwork;
import java.awt.CardLayout;
import java.awt.Component;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import userinterface.Analytics.Disease_Tracking;
import userinterface.Analytics.Max_Doc_Req;

/**
 *
 * @author HarshithaApurvaNikhitha
 */
public class ManageStateJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem ecoSystem;

    /**
     *
     * Creates new form ManageNetworkJPanel
     */
    public ManageStateJPanel(JPanel userProcessContainer, EcoSystem ecoSystem) {
        initComponents();

        this.userProcessContainer = userProcessContainer;
        this.ecoSystem = ecoSystem;
        populateCountryJComboBox();

    }
    
    private void populateCountryJComboBox() {
        countryCombo.removeAllItems();
        
        if(ecoSystem.getCountryList()!=null){

        for (CountryNetwork country : ecoSystem.getCountryList()) {
            countryCombo.addItem(country);
        }
        }

    }

    private void populateStateJTable() {
        DefaultTableModel defaultTableModel = (DefaultTableModel) networkTable.getModel();

        defaultTableModel.setRowCount(0);
        CountryNetwork countryNetwork = (CountryNetwork)countryCombo.getSelectedItem();
        if(countryNetwork!=null){
        for (StateNetwork stateNetwork : countryNetwork.getStateNetwork()) {
            Object[] objects = new Object[1];
            objects[0] = stateNetwork;
            defaultTableModel.addRow(objects);
        }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        networkTable = new javax.swing.JTable();
        stateLabel = new javax.swing.JLabel();
        addNetworkBtn = new javax.swing.JButton();
        nameText = new javax.swing.JTextField();
        backBtn = new javax.swing.JButton();
        managestatesLabel = new javax.swing.JLabel();
        deleteNetworkButton = new javax.swing.JButton();
        countryLabel = new javax.swing.JLabel();
        countryCombo = new javax.swing.JComboBox();
        diseaseTrackingButton = new javax.swing.JButton();
        maxDocOrdersButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 204, 153));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        networkTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "State Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(networkTable);
        if (networkTable.getColumnModel().getColumnCount() > 0) {
            networkTable.getColumnModel().getColumn(0).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 160, 550, 100));

        stateLabel.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        stateLabel.setText("Enter State:");
        add(stateLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 390, 140, 40));

        addNetworkBtn.setBackground(new java.awt.Color(153, 153, 153));
        addNetworkBtn.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        addNetworkBtn.setText("Add New State");
        addNetworkBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNetworkBtnActionPerformed(evt);
            }
        });
        add(addNetworkBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 390, -1, -1));
        add(nameText, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 390, 190, 40));

        backBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/AdminRole/click-go-back-button.png"))); // NOI18N
        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });
        add(backBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 530, 110, 50));

        managestatesLabel.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        managestatesLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        managestatesLabel.setText("Manage States");
        add(managestatesLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 20, 761, 41));

        deleteNetworkButton.setBackground(new java.awt.Color(153, 153, 153));
        deleteNetworkButton.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        deleteNetworkButton.setText("Delete State");
        deleteNetworkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteNetworkButtonActionPerformed(evt);
            }
        });
        add(deleteNetworkButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 270, -1, -1));

        countryLabel.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        countryLabel.setText("Country:");
        add(countryLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 110, -1, -1));

        countryCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        countryCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                countryComboActionPerformed(evt);
            }
        });
        add(countryCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 110, 136, -1));

        diseaseTrackingButton.setBackground(new java.awt.Color(153, 153, 153));
        diseaseTrackingButton.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        diseaseTrackingButton.setText("Disease Tracking");
        diseaseTrackingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                diseaseTrackingButtonActionPerformed(evt);
            }
        });
        add(diseaseTrackingButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 270, 240, -1));

        maxDocOrdersButton.setBackground(new java.awt.Color(153, 153, 153));
        maxDocOrdersButton.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        maxDocOrdersButton.setText("Max Doctor orders");
        maxDocOrdersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxDocOrdersButtonActionPerformed(evt);
            }
        });
        add(maxDocOrdersButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 330, 240, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void addNetworkBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNetworkBtnActionPerformed

        String name = nameText.getText();

        if (!name.matches("^[a-zA-Z]+$")) {
            JOptionPane.showMessageDialog(null, "State name should contain only letters", "Info", JOptionPane.WARNING_MESSAGE);
            return;
        }
        CountryNetwork countryNetwork = (CountryNetwork)countryCombo.getSelectedItem();
        
        if(countryNetwork!=null){
            StateNetwork stateNetwork = countryNetwork.addStateNetwork();
            stateNetwork.setNetworkName(name);
            JOptionPane.showMessageDialog(null,"State network added successfully");
            populateStateJTable();
        }
        
        else{
        JOptionPane.showMessageDialog(null,"Please select a row");
        }

        
    }//GEN-LAST:event_addNetworkBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        userProcessContainer.remove(this);
         Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        userinterface.SysAdminWorkArea.SystemAdminWorkAreaJPanel sysAdminwjp = (userinterface.SysAdminWorkArea.SystemAdminWorkAreaJPanel) component;
        sysAdminwjp.populateJTree();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backBtnActionPerformed

    private void deleteNetworkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteNetworkButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = networkTable.getSelectedRow();
        
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null,"Please select a row");
            return;
            
        }
        
        StateNetwork stateNetwork = (StateNetwork) networkTable.getValueAt(selectedRow, 0);
        CountryNetwork countryNetwork = (CountryNetwork)countryCombo.getSelectedItem();
        if(countryNetwork!= null){
        countryNetwork.removeStateNetwork(stateNetwork);
        JOptionPane.showMessageDialog(null,"State network removed successfully");
        populateStateJTable();
        }
        
    }//GEN-LAST:event_deleteNetworkButtonActionPerformed

    private void countryComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_countryComboActionPerformed
        // TODO add your handling code here:
        populateStateJTable();
    }//GEN-LAST:event_countryComboActionPerformed

    private void diseaseTrackingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_diseaseTrackingButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = networkTable.getSelectedRow();
        
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null,"Please select a row");
            return;
            
        }
        
        StateNetwork stateNetwork = (StateNetwork) networkTable.getValueAt(selectedRow, 0);
        
        Disease_Tracking disease_Tracking = new Disease_Tracking(userProcessContainer,stateNetwork);
        userProcessContainer.add("Disease_Tracking", disease_Tracking);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    
        
    }//GEN-LAST:event_diseaseTrackingButtonActionPerformed

    private void maxDocOrdersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxDocOrdersButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = networkTable.getSelectedRow();
        
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null,"Please select a row");
            return;
            
        }
        
        StateNetwork stateNetwork = (StateNetwork) networkTable.getValueAt(selectedRow, 0);
        
        Max_Doc_Req max_Doc_Req = new Max_Doc_Req(userProcessContainer,stateNetwork);
        userProcessContainer.add("Max_Doc_Req", max_Doc_Req);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    
        
    
    }//GEN-LAST:event_maxDocOrdersButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addNetworkBtn;
    private javax.swing.JButton backBtn;
    private javax.swing.JComboBox countryCombo;
    private javax.swing.JLabel countryLabel;
    private javax.swing.JButton deleteNetworkButton;
    private javax.swing.JButton diseaseTrackingButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel managestatesLabel;
    private javax.swing.JButton maxDocOrdersButton;
    private javax.swing.JTextField nameText;
    private javax.swing.JTable networkTable;
    private javax.swing.JLabel stateLabel;
    // End of variables declaration//GEN-END:variables
}
