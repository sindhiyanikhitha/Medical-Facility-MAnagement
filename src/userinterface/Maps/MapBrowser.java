/*
 * To  change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.Maps;

import Business.Location.LocationCoordinates;
import Business.Organization.Organization;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.teamdev.jxbrowser.chromium.Browser;
import com.teamdev.jxbrowser.chromium.swing.BrowserView;
import java.awt.*;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JPanel;


/**
 *
 * @author HarshithaApurvaNikhitha
 */
public class MapBrowser extends javax.swing.JPanel {

    /**
     * Creates new form MapBrowser
     */
    final Browser browser;
    BrowserView browserView;
    JPanel userProcessContainer;
    Organization organization;
    LocationCoordinates locationCoordinates;
       
    
    public MapBrowser() {
        initComponents();
        //this.userProcessContainer = userProcessContainer;
        browser = new Browser();
        browserView = new BrowserView(browser);
        backBtn.setVisible(false);
        setMyLocationBtn.setVisible(false);
        loadThisBrowser();
    }
    
    public MapBrowser(JPanel userProcessContainer, Organization organization) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        browser = new Browser();
        browserView = new BrowserView(browser);
        backBtn.setVisible(true);
        setMyLocationBtn.setVisible(true);
        loadThisBrowser();
    }
    
    public MapBrowser(JPanel userProcessContainer, LocationCoordinates locationCoordinates) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.locationCoordinates = locationCoordinates;
        browser = new Browser();
        browserView = new BrowserView(browser);
        backBtn.setVisible(true);
        setMyLocationBtn.setVisible(true);
        loadThisBrowser();
    }
    
    
    public void loadThisBrowser(){
        
       mapsjPanel.add(browserView, BorderLayout.CENTER);
       browser.loadURL("https://www.google.com//maps");
        System.out.println("Printing");
   }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        btnjPanel = new javax.swing.JPanel();
        getUrlJBn = new javax.swing.JButton();
        setMyLocationBtn = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();
        mapsjPanel = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        btnjPanel.setBackground(new java.awt.Color(255, 204, 153));
        btnjPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        getUrlJBn.setBackground(new java.awt.Color(153, 153, 153));
        getUrlJBn.setText("Get URL");
        getUrlJBn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getUrlJBnActionPerformed(evt);
            }
        });
        btnjPanel.add(getUrlJBn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 167, 109, -1));

        setMyLocationBtn.setBackground(new java.awt.Color(153, 153, 153));
        setMyLocationBtn.setText("Set my location");
        setMyLocationBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setMyLocationBtnActionPerformed(evt);
            }
        });
        btnjPanel.add(setMyLocationBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 208, 109, -1));

        backBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/AdminRole/click-go-back-button.png"))); // NOI18N
        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });
        btnjPanel.add(backBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 270, 110, 60));

        jSplitPane1.setLeftComponent(btnjPanel);

        mapsjPanel.setBackground(new java.awt.Color(255, 204, 153));
        mapsjPanel.setLayout(new java.awt.BorderLayout());
        jSplitPane1.setRightComponent(mapsjPanel);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void getUrlJBnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getUrlJBnActionPerformed
        // TODO add your handling code here:
        String url = browser.getURL();
        System.out.println("URL:"+url);
        
        // String to be scanned to find the pattern.
      
      String latitudeRegexPattern = "\\w+([0-9])+\\.([0-9])+\\w";
      
      String longitudeRegexPattern = "[^(\\,+\\@+\\w)]+([0-9])+\\.([0-9])+\\w";

      // Create a Pattern object
      Pattern latitude = Pattern.compile(latitudeRegexPattern);
      Pattern longitude = Pattern.compile(longitudeRegexPattern);

      // Now create matcher object.
      Matcher latMatcher = latitude.matcher(url);
      Matcher longMatcher = longitude.matcher(url);
      if (latMatcher.find( )&&longMatcher.find()) {
         System.out.println("Latitude: "+latMatcher.group());
         System.out.println("Longitude: "+longMatcher.group());
            try {
                calculateDistance();
                //System.out.println("Found value: " + m.group(1) );
                //System.out.println("Found value: " + m.group(2) );
            } catch (Exception ex) {
                Logger.getLogger(MapBrowser.class.getName()).log(Level.SEVERE, null, ex);
            }
      }else {
         System.out.println("NO MATCH");
      }
        
        
        
    }//GEN-LAST:event_getUrlJBnActionPerformed

    private void setMyLocationBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setMyLocationBtnActionPerformed
        // TODO add your handling code here:
        
        String url = browser.getURL();
        // String to be scanned to find the pattern.
      
      String latitudeRegexPattern = "\\w+([0-9])+\\.([0-9])+\\w";
      
      String longitudeRegexPattern = "[^(\\,+\\@+\\w)]+([0-9])+\\.([0-9])+\\w";

      // Create a Pattern object
      Pattern latPattern = Pattern.compile(latitudeRegexPattern);
      Pattern longPattern = Pattern.compile(longitudeRegexPattern);

      // Now create matcher object.
      Matcher latMatcher = latPattern.matcher(url);
      Matcher longMatcher = longPattern.matcher(url);
      if (latMatcher.find( )&&longMatcher.find()) {
         System.out.println("Latitude: "+latMatcher.group());
         System.out.println("Longitude: "+longMatcher.group());
            try {
                calculateDistance();
                //System.out.println("Found value: " + m.group(1) );
                //System.out.println("Found value: " + m.group(2) );
            } catch (Exception ex) {
                Logger.getLogger(MapBrowser.class.getName()).log(Level.SEVERE, null, ex);
            }
      }else {
         System.out.println("NO MATCH");
      }
        
        
        if(organization!=null){
            LocationCoordinates locationCoordinates1 = new LocationCoordinates();
            locationCoordinates1.setCoordinates(latMatcher.group(), longMatcher.group());
            organization.setLocationCoordinates(locationCoordinates1);
        }
        else if(locationCoordinates !=null){
        locationCoordinates.setCoordinates(latMatcher.group(), longMatcher.group());
        }
    }//GEN-LAST:event_setMyLocationBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backBtnActionPerformed

    public void calculateDistance( ) throws Exception{
    String key ="AlzaSyBOU6ZxDBnp8YJgCZtaedCH8dO7h3K6-01"; 
    String urlString1 = "https://maps.googleapis.com/maps/api/distancematrix/json?units=imperial&origins=40.6655101,-73.8918896&destinations=40.6905615%2C-73.9976592%7C40.659569%2C-73.933783%7C40.729029%2C-73.851524%7C40.6860072%2C-73.6334271%7C40.598566%2C-73.7527626%7C40.659569%2C-73.933783%7C40.729029%2C-73.851524%7C40.6860072%2C-73.6334271%7C40.598566%2C-73.7527626&key="+key;
    
    URL url = new URL(urlString1);
        //URLConnection urlconn = url.openConnection();
        InputStreamReader inputStreamReader = null;
        StringBuilder stringBuilder = new StringBuilder();
        HttpURLConnection httpURLConnection = (HttpURLConnection)url.openConnection();
        httpURLConnection.setRequestMethod("GET");
        httpURLConnection.connect();
//        urlconn.connect();
//        InputStream inputStream = urlconn.getInputStream();
         //= url.openStream();
        //System.out.println("Code: "+urlConn.getResponseCode());
        if (httpURLConnection != null && httpURLConnection.getInputStream() != null) {
				inputStreamReader = new InputStreamReader(httpURLConnection.getInputStream(),
						Charset.defaultCharset());
				BufferedReader bufferedReader = new BufferedReader(inputStreamReader);
				if (bufferedReader != null) {
					int cp;
					while ((cp = bufferedReader.read()) != -1) {
						stringBuilder.append((char) cp);
					}
					bufferedReader.close();
				}
			}
		inputStreamReader.close();
                System.out.println(stringBuilder.toString());
                
     
               
JsonParser jsonParser = new JsonParser();

JsonObject jsonObject = (JsonObject) jsonParser.parse(stringBuilder.toString());

        JsonArray jsonArray = jsonObject.getAsJsonArray("rows");
        
        Iterator <JsonElement> iterator = jsonArray.iterator();
         
    while (iterator.hasNext()) {
        
        Object obj = iterator.next();
        if(obj instanceof JsonObject) {
           JsonArray elements = ((JsonObject)obj).getAsJsonArray("elements"); 
        
           
         Iterator <JsonElement> iterator1 = elements.iterator();
         int i =0;
    while (iterator1.hasNext()) {
        i++;
        JsonObject obj1 = (JsonObject)iterator1.next();
        if(obj1 instanceof JsonObject) {
            //JsonObject jsonObject = obj1.get("distance").getAsJsonObject();
            //System.out.println(jsonObject.get("text"));
            String dist = obj1.getAsJsonObject("distance").get("text").getAsString();
            String duration = obj1.getAsJsonObject("duration").get("text").getAsString();
            System.out.println("\n Element: "+ i+ "\t"+" Distance: "+dist+"\t Duration: "+duration);
        
        }
    }
           
        }
    }
        
        
        
        }        
        //System.out.println(distance);


/* 
* For distance, below is only partial solution as the 
* output to string destination_addr will contain square brackets [] and double codes ""
* Eg. [ "1600 Pennsylvania Avenue, Hagerstown, MD 21742, USA" ]
*/
/*
String destination_addr = json.get("destination_addresses").get("")
                            .toString();

StringBuilder stringBuilderDestinationAddr = new StringBuilder();

for (int i = 0; i < destination_addr.length(); i++)
    if (destination_addr.charAt(i) != '[' && destination_addr.charAt(i) != ']' && destination_addr.charAt(i) != '"')
         stringBuilderDestinationAddr.append(destination_addr.charAt(i));

String strCleanDestination = stringBuilderDestinationAddr.toString();
        System.out.println(strCleanDestination);
   
   
    
    }
  */   
    public void getCleanedDistances(){
    
//    //httpResponse is the output of google api
//JsonObject jsonRespRouteDistance = new JsonObject().getAsJsonObject(TOOL_TIP_TEXT_KEY)
//
//String distance = jsonRespRouteDistance.get("text").toString();
//
///* 
//* For distance, below is only partial solution as the 
//* output to string destination_addr will contain square brackets [] and double codes ""
//* Eg. [ "1600 Pennsylvania Avenue, Hagerstown, MD 21742, USA" ]
//* 
//*/
//String destination_addr = new JsonObject()
//                            .get("destination_addresses")
//                            .toString();
//
//StringBuilder stringBuilderDestinationAddr = new StringBuilder();
//
//for (int i = 0; i < destination_addr.length(); i++)
//    if (destination_addr.charAt(i) != '[' && destination_addr.charAt(i) != ']' && destination_addr.charAt(i) != '"')
//         stringBuilderDestinationAddr.append(pickup_addr.destination_addr (i));
//
//String strCleanDestination = stringBuilderDestinationAddr.toString();
//    
   }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JPanel btnjPanel;
    private javax.swing.JButton getUrlJBn;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JPanel mapsjPanel;
    private javax.swing.JButton setMyLocationBtn;
    // End of variables declaration//GEN-END:variables
}
