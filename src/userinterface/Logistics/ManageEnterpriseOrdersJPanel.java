/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.Logistics;

import Business.Enterprise.Enterprise;
import Business.Enterprise.StateHealthDept;
import Business.Enterprise.TravelAgencyEnterprise;
import Business.Network.StateNetwork;
import Business.Order.OrderQueue;
import Business.Order.OrderRequest;
import Business.Organization.LogisticsOrg;
import Business.Transport.Ambulance;
import Business.Transport.Drone;
import Business.Transport.TransportMode;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import userinterface.Doctor.TrackMyOrdersJPanel;

/**
 *
 * @author Apurva
 */
public class ManageEnterpriseOrdersJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageCDCApprovalOrdersJPanel
     */
    JPanel userProcessContainer;
    UserAccount userAccount;
    LogisticsOrg organization;
    StateNetwork network;
    TravelAgencyEnterprise enterprise;
    OrderQueue orderQueue;
    public ManageEnterpriseOrdersJPanel(JPanel userProcessContainer, UserAccount account, LogisticsOrg organization, TravelAgencyEnterprise enterprise, OrderQueue orderQueue) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.organization = organization;
        this.enterprise = enterprise;
        this.orderQueue = orderQueue;
        
         populateEnterpriseJTable();
         populateTransportTypeComboBox();

        myOrdersJButton.setVisible(true);
        assignJButton.setVisible(true);
        refreshJButton.setVisible(true);
        approveOrderJButton.setVisible(true);
        autoApproveOrderJButton.setVisible(false);
        trackOrderJButton.setVisible(true);
        enterpriseOrdersJButton.setVisible(false);
        
//        this.populateJTable();
    }
    private void populateTransportTypeComboBox(){
    transportTypeJComboBox.removeAllItems();
        for (TransportMode.TransportModeType type : TransportMode.TransportModeType.values()){
            transportTypeJComboBox.addItem(type);
        }
    
    }
    
    private void populateEnterpriseJTable(){
    
        DefaultTableModel model = (DefaultTableModel)workRequestJTable.getModel();
        tableTypeJLabel.setText("You are currently viewing all Travel Agency Enterprise orders");
        model.setRowCount(0);
        if(enterprise.getOrderQueue()!= null){
        for(OrderRequest request : enterprise.getOrderQueue().getOrderRequests()){
            Object[] row = new Object[5];
            row[0] = request.getVaccine().getVaccineName();
            row[1] = request.getQuantity();
            row[2] = request;
            row[3] = request.getOrderReceiver() == null ? null : request.getOrderReceiver().getEmployee().getEmployeeName();
            row[4] = request.getOrderStatus();
            
            model.addRow(row);
        }
        }
    
    }
    
    private void populateLogisticsOrganizationJTable(){ 
    
        DefaultTableModel model = (DefaultTableModel)workRequestJTable.getModel();
        tableTypeJLabel.setText("You are currently viewing orders processed by you");
        model.setRowCount(0);
        if(userAccount.getOrderQueue()!= null){
        for(OrderRequest request : userAccount.getOrderQueue().getOrderRequests()){
            Object[] row = new Object[5];
            row[0] = request;
            row[1] = request.getQuantity();
            row[2] = request.getOrderSender();
            row[3] = request.getOrderReceiver() == null ? null : request.getOrderReceiver().getEmployee().getEmployeeName();
            row[4] = request.getOrderStatus();
            
            model.addRow(row);
        }
        }
    
    }
    

/*    private void populateJTable(){
        DefaultTableModel model = (DefaultTableModel)workRequestJTable.getModel();
        model.setRowCount(0);
        if(enterprise.getOrderQueue()!= null){
            for(PackageDeliveryRequest request : this.orderQueue.getPackageDeliveryRequest()){
                Object[] row = new Object[5];
                row[0] = request;
                row[1] = request.getModeOfTransport().getName();
                row[2] = request.getInventoryItem();
                row[3] = request.getEda();
                row[4] = request.getStatus();
                model.addRow(row);
            }
        }
    }*/
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        assignJButton = new javax.swing.JButton();
        approveOrderJButton = new javax.swing.JButton();
        refreshJButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        trackOrderJButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        autoApproveOrderJButton = new javax.swing.JButton();
        enterpriseOrdersJButton = new javax.swing.JButton();
        tableTypeJLabel = new javax.swing.JLabel();
        myOrdersJButton = new javax.swing.JButton();
        transportTypeJComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 204, 153));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order Item", "Quantity", "Sender", "Receiver", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 210, 660, 110));

        assignJButton.setBackground(new java.awt.Color(153, 153, 153));
        assignJButton.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        assignJButton.setText("Assign to me");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });
        add(assignJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 380, -1, -1));

        approveOrderJButton.setBackground(new java.awt.Color(153, 153, 153));
        approveOrderJButton.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        approveOrderJButton.setText("Approve");
        approveOrderJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                approveOrderJButtonActionPerformed(evt);
            }
        });
        add(approveOrderJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 480, 160, -1));

        refreshJButton.setBackground(new java.awt.Color(153, 153, 153));
        refreshJButton.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });
        add(refreshJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 330, -1, -1));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Manage Order Approvals");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 10, 660, 41));

        trackOrderJButton.setBackground(new java.awt.Color(153, 153, 153));
        trackOrderJButton.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        trackOrderJButton.setText("Track Order");
        trackOrderJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trackOrderJButtonActionPerformed(evt);
            }
        });
        add(trackOrderJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 380, -1, -1));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/AdministrativeRole/together-logo.png"))); // NOI18N
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 520, -1, -1));

        autoApproveOrderJButton.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        autoApproveOrderJButton.setText("Auto Approve");
        autoApproveOrderJButton.setEnabled(false);
        autoApproveOrderJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoApproveOrderJButtonActionPerformed(evt);
            }
        });
        add(autoApproveOrderJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 380, 220, -1));

        enterpriseOrdersJButton.setBackground(new java.awt.Color(153, 153, 153));
        enterpriseOrdersJButton.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        enterpriseOrdersJButton.setText("Enterprise Orders");
        enterpriseOrdersJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterpriseOrdersJButtonActionPerformed(evt);
            }
        });
        add(enterpriseOrdersJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 100, -1, -1));

        tableTypeJLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tableTypeJLabel.setText("<Display the table content here>");
        add(tableTypeJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 170, 630, 30));

        myOrdersJButton.setBackground(new java.awt.Color(153, 153, 153));
        myOrdersJButton.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        myOrdersJButton.setText("My processed Orders");
        myOrdersJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                myOrdersJButtonActionPerformed(evt);
            }
        });
        add(myOrdersJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 100, -1, -1));

        transportTypeJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        transportTypeJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transportTypeJComboBoxActionPerformed(evt);
            }
        });
        add(transportTypeJComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 430, 230, 30));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel1.setText("Select the mode of transport:");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 430, 230, 30));

        backBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/AdminRole/click-go-back-button.png"))); // NOI18N
        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });
        add(backBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 530, 110, 60));
    }// </editor-fold>//GEN-END:initComponents

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed
        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0){
            return;
        }

        OrderRequest request = (OrderRequest)workRequestJTable.getValueAt(selectedRow, 2);
        String status = request.getOrderStatus();
        if(status.equals("Processed by Pharmacy, Forwarded to Travel Agency")||status.equals("Assigned to a Logistics organization")){
            request.setOrderReceiver(userAccount);
            request.setOrderStatus("Assigned to a Logistics organization");

            OrderRequest lastRequest = request.getLastOrderRequest();

            lastRequest.setOrderReceiver(userAccount);
            lastRequest.setOrderStatus("Assigned to a Logistics organization");
        }
        else{
            JOptionPane.showMessageDialog(null,"This order has not been forwarded to you !");
        }

        populateEnterpriseJTable();
        
        
        
        
        //populateJTable();

    }//GEN-LAST:event_assignJButtonActionPerformed

    private void approveOrderJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_approveOrderJButtonActionPerformed

        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0){
            return;
        }
        

        OrderRequest request = (OrderRequest)workRequestJTable.getValueAt(selectedRow, 2);
        if( (request.getOrderReceiver()!=null) && (request.getOrderReceiver().equals(userAccount)) ){
            
            
            
            
            
            //OrderRequest nextRequest = new OrderRequest();
            boolean available = false;
            if(transportTypeJComboBox.getSelectedItem().equals(TransportMode.TransportModeType.Drone)){
            
            for(TransportMode mode: organization.getTransportList().getTransportList()){
            if(mode instanceof Drone && mode.getStatus().equals("Available")){
            request.setTransportMode(mode);
            request.setDist(organization.getTransportList().distance(
                    request.getSourceLocationCoordinates().getLatitudeCoordinates(),
                    request.getSourceLocationCoordinates().getLongitudeCoordinates(),
                    request.getDestinationLocationCoordinates().getLatitudeCoordinates(),
                    request.getDestinationLocationCoordinates().getLongitudeCoordinates(),'M'));
            mode.setStatus("Busy");
            available = true;
            break;
            }
            
            
            }
            
            }
            else {for(TransportMode mode: organization.getTransportList().getTransportList()){
            if(mode instanceof Ambulance && mode.getStatus().equals("Available")){
            request.setTransportMode(mode);
            mode.setStatus("Busy");
            available = true;
            break;
            
            }
            }
            }
            if (available==false){
                JOptionPane.showMessageDialog(null,"No available transport vehicles !");
                return;}
//            nextRequest.setSender(userAccount);
//            nextRequest.setOrderStatus("Processed by Logistics, Out for Delivery");
//            lastRequest.assignOrderRequest(nextRequest);
//            
            OrderRequest lastRequest = request.getLastOrderRequest();
            
            lastRequest.createAndGetNewOrderRequest().setOrderSender(userAccount);
            lastRequest.createAndGetNewOrderRequest().setOrderReceiver(request.getOrderSender());
            lastRequest.createAndGetNewOrderRequest().setOrderStatus("Processed by Logistics, Out for Delivery");
            
            
            request.setOrderStatus("Processed by Logistics, Out for Delivery");
            request.setOrderReceiver(null);
        
        
            userAccount.getOrderQueue().getOrderRequests().add(request);
        
    }   
        else{
         JOptionPane.showMessageDialog(null,"Please Assign this order to yourself for processing !");
        }
        
        populateEnterpriseJTable();
       // populateJTable();
    }//GEN-LAST:event_approveOrderJButtonActionPerformed

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        //populateJTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void trackOrderJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trackOrderJButtonActionPerformed
        // TODO add your handling code here:

        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null,"Please select a row !");
            return;
        }

        OrderRequest request = (OrderRequest)workRequestJTable.getValueAt(selectedRow, 2);

        TrackMyOrdersJPanel trackOrderJPanel = new TrackMyOrdersJPanel(userProcessContainer, request);
        userProcessContainer.add("TrackMyOrdersJPanel", trackOrderJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);

    }//GEN-LAST:event_trackOrderJButtonActionPerformed

    private void autoApproveOrderJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoApproveOrderJButtonActionPerformed
        // TODO add your handling code here:
        
        for(OrderRequest request: enterprise.getOrderQueue().getOrderRequests()){
        String status = request.getOrderStatus();
        if(status.equals("Order Placed")){
             request.setOrderReceiver(userAccount);
            request.setOrderStatus("Pending Logistics Approval");
            
            OrderRequest lastRequest = request.getLastOrderRequest();
            
            lastRequest.setOrderReceiver(userAccount);
            lastRequest.setOrderStatus("Pending Logistics Approval");
            
            
            //lastRequest.createAndGetNewOrderRequest().setSender(userAccount);
            //lastRequest.createAndGetNewOrderRequest().setOrderStatus("Processed by Travel Agency, Out for delivery !");
            
            
            request.setOrderStatus("Processed by Travel Agency, Out for delivery !");
        
            for(Enterprise enterprise: network.getEnterpriseList().getEnterpriseList()){
            if (enterprise instanceof StateHealthDept){
            enterprise.getOrderQueue().getOrderRequests().add(request);
            userAccount.getOrderQueue().getOrderRequests().add(request);
            }
        }
            
            
        }
        
        
        
        }
        
        
        
    }//GEN-LAST:event_autoApproveOrderJButtonActionPerformed

    private void enterpriseOrdersJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterpriseOrdersJButtonActionPerformed
        // TODO add your handling code here:
        populateEnterpriseJTable();

        myOrdersJButton.setVisible(true);
        assignJButton.setVisible(true);
        refreshJButton.setVisible(true);
        approveOrderJButton.setVisible(true);
        autoApproveOrderJButton.setVisible(false);
        trackOrderJButton.setVisible(true);
        enterpriseOrdersJButton.setVisible(false);
    }//GEN-LAST:event_enterpriseOrdersJButtonActionPerformed

    private void myOrdersJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_myOrdersJButtonActionPerformed
        // TODO add your handling code here:
        populateLogisticsOrganizationJTable();
        myOrdersJButton.setVisible(false);
        assignJButton.setVisible(false);
        refreshJButton.setVisible(false);
        approveOrderJButton.setVisible(false);
        autoApproveOrderJButton.setVisible(false);
        trackOrderJButton.setVisible(true);
        enterpriseOrdersJButton.setVisible(true);
    }//GEN-LAST:event_myOrdersJButtonActionPerformed

    private void transportTypeJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transportTypeJComboBoxActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_transportTypeJComboBoxActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton approveOrderJButton;
    private javax.swing.JButton assignJButton;
    private javax.swing.JButton autoApproveOrderJButton;
    private javax.swing.JButton backBtn;
    private javax.swing.JButton enterpriseOrdersJButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton myOrdersJButton;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JLabel tableTypeJLabel;
    private javax.swing.JButton trackOrderJButton;
    private javax.swing.JComboBox transportTypeJComboBox;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
